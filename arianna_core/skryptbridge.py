"""
SkryptBridge - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (MiniLE + Skryptpoetry)
–û—Ç–¥–µ–ª–µ–Ω–æ –æ—Ç Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏.
"""
import os
import sys
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ (skryptbridge —Ç–µ–ø–µ—Ä—å –≤ arianna_core)
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'skryptpoetry'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'skryptpoetry', 'arianna_linux'))

# –ò–º–ø–æ—Ä—Ç—ã MiniLE
try:
    from . import mini_le
except ImportError:
    # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    import mini_le

# –ò–º–ø–æ—Ä—Ç—ã Skryptpoetry - –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
SKRYPTPOETRY_AVAILABLE = None  # –õ–µ–Ω–∏–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

def _check_skryptpoetry():
    global SKRYPTPOETRY_AVAILABLE
    if SKRYPTPOETRY_AVAILABLE is None:
        try:
            from symphony import Symphony
            from letsgo import run_script
            SKRYPTPOETRY_AVAILABLE = True
            return True
        except ImportError as e:
            logging.warning(f"Skryptpoetry not available: {e}")
            SKRYPTPOETRY_AVAILABLE = False
            return False
    return SKRYPTPOETRY_AVAILABLE

# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Symphony - –ù–ï –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
_symphony = None

def _get_symphony():
    """–°–æ–∑–¥–∞–µ—Ç Symphony —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏."""
    global _symphony
    if _symphony is None and _check_skryptpoetry():
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            from symphony import Symphony
            
            scripts_path = os.path.join(os.path.dirname(__file__), '..', 'skryptpoetry', 'tongue', 'prelanguage.md')
            dataset_path = os.path.join(os.path.dirname(__file__), '..', 'skryptpoetry', 'datasets', 'dataset01.md')
            _symphony = Symphony(dataset_path=dataset_path, scripts_path=scripts_path)
            logging.info("‚úÖ Symphony initialized lazily")
        except Exception as e:
            logging.error(f"‚ùå Symphony initialization failed: {e}")
    return _symphony

async def process_message(message: str) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç MiniLE + –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è Skryptpoetry.
    """
    try:
        # –ó–ê–ü–£–°–ö–ê–ï–ú MiniLE –ò Symphony –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û
        symphony = _get_symphony()
        
        if hasattr(asyncio, "to_thread"):
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
            minile_task = asyncio.to_thread(mini_le.chat_response, message)
            
            if SKRYPTPOETRY_AVAILABLE and symphony:
                # Symphony —Ä–∞–±–æ—Ç–∞–µ—Ç —Å message, –∞ –Ω–µ —Å –æ—Ç–≤–µ—Ç–æ–º MiniLE
                script_task = asyncio.to_thread(symphony.respond, message)
                
                # –ñ–¥–µ–º –æ–±–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                minile_reply, script_code = await asyncio.gather(minile_task, script_task)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
                script_result = await asyncio.to_thread(run_script, script_code)
                return f"{minile_reply}\n\n{script_result}"
            else:
                minile_reply = await minile_task
                return minile_reply
        else:
            # Python 3.8 fallback - —Ç–æ–∂–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            loop = asyncio.get_running_loop()
            minile_task = loop.run_in_executor(None, mini_le.chat_response, message)
            
            if SKRYPTPOETRY_AVAILABLE and symphony:
                script_task = loop.run_in_executor(None, symphony.respond, message)
                minile_reply, script_code = await asyncio.gather(minile_task, script_task)
                script_result = await loop.run_in_executor(None, run_script, script_code)
                return f"{minile_reply}\n\n{script_result}"
            else:
                minile_reply = await minile_task
                return minile_reply
            
    except Exception as e:
        logging.error(f"Message processing failed: {e}")
        return "Error: failed to generate response."

def process_message_sync(message: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–µ-async –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."""
    try:
        # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –î–ê–ñ–ï –í –°–ò–ù–•–†–û–ù–ù–û–ô –í–ï–†–°–ò–ò
        import threading
        import queue
        
        results = queue.Queue()
        
        def minile_worker():
            try:
                result = mini_le.chat_response(message)
                results.put(('minile', result))
            except Exception as e:
                results.put(('minile_error', str(e)))
        
        def symphony_worker():
            try:
                symphony = _get_symphony()
                if _check_skryptpoetry() and symphony:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º run_script —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
                    from letsgo import run_script
                    
                    script_code = symphony.respond(message)  # –†–∞–±–æ—Ç–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    script_result = run_script(script_code)
                    results.put(('symphony', script_result))
                else:
                    results.put(('symphony', ''))
            except Exception:
                results.put(('symphony', ''))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        t1 = threading.Thread(target=minile_worker)
        t2 = threading.Thread(target=symphony_worker)
        
        t1.start()
        t2.start()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        minile_reply = ""
        script_result = ""
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        received = 0
        for _ in range(2):
            try:
                result_type, result_data = results.get(timeout=10)  # –ö–æ—Ä–æ—á–µ timeout
                received += 1
                if result_type == 'minile':
                    minile_reply = result_data
                    logging.info(f"‚úÖ MiniLE completed: {len(result_data)} chars")
                elif result_type == 'symphony':
                    script_result = result_data
                    logging.info(f"‚úÖ Symphony completed: {len(result_data)} chars")
                elif result_type == 'minile_error':
                    logging.error(f"‚ùå MiniLE error: {result_data}")
                    minile_reply = "MiniLE error occurred"
            except:
                logging.warning(f"‚è∞ Thread timeout after {received} results")
                break
        
        t1.join()
        t2.join()
        
        return f"{minile_reply}\n\n{script_result}" if script_result else minile_reply
            
    except Exception as e:
        logging.error(f"Sync message processing failed: {e}")
        return "Error: failed to generate response."

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    import time
    
    print("=== –¢–ï–°–¢ SKRYPTBRIDGE ===")
    
    start = time.time()
    response = process_message_sync("hello test")
    print(f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {time.time() - start:.3f}s")
    print(f"üìù –û—Ç–≤–µ—Ç: {response}")
